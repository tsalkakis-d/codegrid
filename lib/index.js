// 
// Codegrid
//

// Require events
var events = require('events');


//
// STATUS VARIABLES
//

// Keep a list of created channels
var channels = {};

// Next available number for autogenerated channel name
var autoName = 1;


//
// STATIC DATA
//

// User defined event handlers
var userHandlers = ['onConsume','onPause','onResume','onFlush'];


//
// PUBLISHED PROPERTIES
//

exports.channel = function(options) {
    options = options || {};
    
    if (typeof options === 'string') { // If string, search for an existing channel
        
        // Search for channel and return it (or return null if not found)
        return  channels.hasOwnProperty(options) ? channels[options].public : null;
        
    } else { // If not string, try to create a new local channel
        
        // Init channel public properties
        var public = {
            
            // Name
            name: options.hasOwnProperty('name') ? options.name : 'noname_' + (autoName++),
            
            // Indicate that channel is local in this server
            local: true,    
            
            // Channel state
            state: 'normal',  // 'normal','paused'
            
            // Scope
            scope: options.hasOwnProperty('scope') ? options.scope : {},
            
            // Currently consuming message. Set on consume start, clear on consume end
            message: null,
            
            // Current error
            error: null,
            
            // Event dummy handlers (may be set below)
            onConsume: null,
            onError: null,
            onPause: null,
            onResume: null,
            
        };
        
        // Init channel adding private properties
        var channel = {
            public: public,                     // Public properties
            messages: [],                       // Messages buffer
            controls: [],                       // Control signals buffer
            structure: null,                    // Structure for empty messages (may be updated below)
            // Event related properties
            eventName: 'channel_'+public.name,  // Event name
            event: new events.EventEmitter(),   // Event emitter/listener
        };

        // Validate and parse structure
        // 
        // TODO
        channel.structure = options.structure || null;

        // Validate and set event handlers
        userHandlers.forEach(function(name) {
            if (options.hasOwnProperty(name)) { // If handler is given
                assert(typeof options[name] === 'function');
                public[name] = options.name;
            }
        });
        
        // Add channel to list
        channels[channel.public.name] = channel;

        // Start listening for messages
        channel.event.on(channel.eventName,function(event){
            // TODO: Validate event, store,consume etc
        });
        
        
        // Return public part of channel
        return public;
    }
}